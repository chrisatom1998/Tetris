// Top-level build file where you define versions of plugins that sub-projects/modules will use.


// The `buildscript` block is used by Gradle to load plugins and their dependencies
// that are applied in this very build script or by older `apply plugin:` syntax in modules.
// If you are consistently using the `plugins {}` block in modules and have `pluginManagement`
// in `settings.gradle` for plugin repositories, this `buildscript` block's role diminishes
// for classpath resolution of plugins defined in the `plugins {}` block above.
// However, it's often kept for clarity or if some plugins are still resolved this way.
// We're removing the buildscript block since we're using the plugins DSL
// This helps avoid the "Could not find method android()" error

plugins {
    // Define the versions of plugins used across the project.
    // Adjusted versions for compatibility with Gradle 8.11.1
    id("com.android.application") version '8.5.2' apply false
    id("com.android.library") version '8.5.2' apply false
    id("org.jetbrains.kotlin.android") version "1.9.22" apply false // Changed from 2.1.21
    id("com.google.devtools.ksp") version "1.9.22-1.0.17" apply false // Changed to a KSP 1.x version for Kotlin 1.9.22    id("com.google.dagger.hilt.android") version "2.51" apply false
    id("com.google.gms.google-services") version "4.4.2" apply false
}

// Add repositories at the project level to ensure all plugins can be resolved
repositories {
   //google()
   //mavenCentral()
   //gradlePluginPortal()
}

// Your comment is good practice:
// "Using settings.gradle for repository declarations in newer Gradle versions"
// This typically means your settings.gradle(.kts) should contain:
//
// pluginManagement {
//     repositories {
//         google()
//         mavenCentral()
//         gradlePluginPortal() // Good to have for other common Gradle plugins
//     }
// }
//
// dependencyResolutionManagement {
//     repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) // Recommended
//     repositories {
//         google()
//         mavenCentral()
//         // Add other repositories for your project's library dependencies here if needed
//     }
// }